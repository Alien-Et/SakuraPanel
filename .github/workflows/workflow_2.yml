name: "构建Python"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: "编译 Python 和 zlib (ARM64)"
    runs-on: ubuntu-22.04

    steps:
      # 1. 检出代码
      - name: "检出仓库代码"
        uses: actions/checkout@v4

      # 2. 安装编译依赖
      - name: "安装系统依赖项"
        run: |
          sudo apt update
          sudo apt install -y build-essential zlib1g-dev libffi-dev libssl-dev \
                             libbz2-dev libreadline-dev libsqlite3-dev wget \
                             curl llvm libncurses5-dev libncursesw5-dev \
                             xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                             liblzma-dev git tar python3 python3-pip unzip binutils
          echo "系统依赖安装完成"

      # 3. 设置 Android NDK
      - name: "配置 Android NDK"
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "25.2.9519653"  # NDK 版本号保持英文

      # 4. 设置环境变量
      - name: "配置 NDK 环境变量"
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH
          echo "NDK 路径: $ANDROID_NDK_ROOT"

      # 5. 检查/下载 Python 源码
      - name: "准备 Python 源码"
        run: |
          PYTHON_VERSION="3.10.0"
          if [ ! -d "cpython" ]; then
            echo "下载 Python $PYTHON_VERSION 源码..."
            wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz
            tar -xf Python-$PYTHON_VERSION.tgz
            mv Python-$PYTHON_VERSION cpython
            echo "Python 源码解压完成"
          else
            echo "检测到已存在的 cpython 目录，跳过下载"
          fi

      # 6. 下载 zlib 源码
      - name: "准备 zlib 源码"
        run: |
          if [ ! -d "zlib-1.2.13" ]; then
            echo "下载 zlib 1.2.13 源码..."
            wget https://github.com/madler/zlib/archive/refs/tags/v1.2.13.tar.gz -O zlib-1.2.13.tar.gz
            tar -xvf zlib-1.2.13.tar.gz
            echo "zlib 源码解压完成"
          else
            echo "检测到已存在的 zlib 目录，跳过下载"
          fi

      # 7. 配置交叉编译工具链
      - name: "设置交叉编译工具"
        run: |
          export READELF=$(which readelf)
          if [ ! -f "$READELF" ]; then
            sudo apt install -y binutils
            export READELF=$(which readelf)
          fi
          echo "READELF=$READELF" >> $GITHUB_ENV
          
          export AR="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"
          echo "AR=$AR" >> $GITHUB_ENV
          echo "交叉编译工具配置完成"

      # 8. 编译 Python
      - name: "编译 Python"
        run: |
          cd cpython
          echo "生成 config.site..."
          cat <<EOF > config.site
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          EOF

          echo "开始配置 Python..."
          ./configure --host=aarch64-linux-android \
                      --build=x86_64-linux-gnu \
                      --disable-optimizations \
                      --disable-ipv6 \
                      --with-build-python=$(which python3) \
                      CC="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" \
                      CXX="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" \
                      AR="$AR" \
                      RANLIB="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ranlib" \
                      READELF="$READELF"

          echo "开始编译 Python (使用 $(nproc) 线程)..."
          make -j$(nproc)
          echo "Python 编译完成"

      # 9. 编译 zlib
      - name: "编译 zlib"
        run: |
          cd zlib-1.2.13
          echo "开始编译 zlib..."
          ./configure --prefix="$GITHUB_WORKSPACE/android-rootfs/data"
          make -j$(nproc)
          echo "zlib 编译完成"

      # 10. 安装到模拟目录
      - name: "安装到 Android 根目录"
        run: |
          mkdir -p "$GITHUB_WORKSPACE/android-rootfs/data"
          
          echo "安装 Python..."
          cd cpython
          make install prefix="$GITHUB_WORKSPACE/android-rootfs/data"
          
          echo "安装 zlib..."
          cd ../zlib-1.2.13
          make install prefix="$GITHUB_WORKSPACE/android-rootfs/data"

          echo "安装完成，目录内容:"
          ls -lh "$GITHUB_WORKSPACE/android-rootfs/data"

      # 11. 打包并上传产物
      - name: "打包生成文件"
        run: |
          tar -czvf python-zlib-android-arm64.tar.gz -C "$GITHUB_WORKSPACE/android-rootfs/data" .
          echo "打包完成，文件大小:"
          du -sh python-zlib-android-arm64.tar.gz

      - name: "上传构建产物"
        uses: actions/upload-artifact@v4
        with:
          name: "python-zlib-android-arm64"
          path: "python-zlib-android-arm64.tar.gz"
