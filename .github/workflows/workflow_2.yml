name: 适用于 Android 的 Python 3.10 测试 (ARM64 原生编译)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04-arm # 使用 ARM64 原生运行器
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev \
                              libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
                              libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                              liblzma-dev git tar python3 python3-pip unzip binutils
          python3 --version
          pip3 --version

      - name: 设置 Android NDK (r27.2.12479018)
        uses: android-actions/setup-android@v3
        with:
          ndk-version: "27.2.12479018"

      - name: 验证 NDK 安装
        run: |
          echo "Android NDK 根目录: $ANDROID_NDK_ROOT"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/

      - name: 设置编译工具
        run: |
          export READELF=$(which readelf)
          if [ ! -f "$READELF" ]; then
            sudo apt install -y binutils
            export READELF=$(which readelf)
          fi
          echo "READELF=$READELF" >> $GITHUB_ENV
          export AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/llvm-ar
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/llvm-ranlib" >> $GITHUB_ENV

      - name: 检查是否安装最新 Python
        run: |
          REQUIRED_PYTHON_VERSION="3.10.0"
          if python3 --version | grep -q "$REQUIRED_PYTHON_VERSION"; then
            echo "Python $REQUIRED_PYTHON_VERSION 已安装。"
          else
            echo "正在下载并编译 Python..."
            wget https://www.python.org/ftp/python/$REQUIRED_PYTHON_VERSION/Python-$REQUIRED_PYTHON_VERSION.tgz
            tar -xf Python-$REQUIRED_PYTHON_VERSION.tgz
            mv Python-$REQUIRED_PYTHON_VERSION cpython
          fi

      - name: 下载并解压 zlib
        run: |
          wget https://github.com/madler/zlib/archive/refs/tags/v1.2.13.tar.gz -O zlib-1.2.13.tar.gz
          tar -xvf zlib-1.2.13.tar.gz

      - name: 下载并解压 pip 源代码
        run: |
          wget https://github.com/pypa/pip/archive/refs/tags/22.3.1.tar.gz -O pip-22.3.1.tar.gz
          tar -xvf pip-22.3.1.tar.gz
          mv pip-22.3.1 pip

      - name: 配置并编译 Python
        run: |
          cd cpython
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          EOF

          BUILD_PYTHON=$(which python3)
          ./configure --host=aarch64-linux-android --build=aarch64-linux-gnu \
                      --disable-optimizations \
                      --disable-ipv6 \
                      --with-build-python=$BUILD_PYTHON \
                      CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/aarch64-linux-android21-clang \
                      CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/aarch64-linux-android21-clang++ \
                      AR=$AR \
                      RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-aarch64/bin/llvm-ranlib \
                      READELF=$READELF

          echo "配置完成"
          make -j$(nproc)

      - name: 编译 zlib
        run: |
          cd zlib-1.2.13
          ./configure --prefix=$GITHUB_WORKSPACE/android-rootfs/data
          make -j$(nproc)

      - name: 将 Python、zlib 和 pip 安装到模拟 Android 根目录
        run: |
          mkdir -p $GITHUB_WORKSPACE/android-rootfs/data

          # 安装 Python
          cd cpython
          make install prefix=$GITHUB_WORKSPACE/android-rootfs/data

          # 安装 zlib
          cd ../zlib-1.2.13
          make install

          # 安装 pip
          cd ../pip
          $GITHUB_WORKSPACE/android-rootfs/data/bin/python3 setup.py install --prefix=$GITHUB_WORKSPACE/android-rootfs/data

          # 检查 Python 可执行文件名
          ls -l $GITHUB_WORKSPACE/android-rootfs/data/bin/python*
          if [ -f "$GITHUB_WORKSPACE/android-rootfs/data/bin/python3.10" ]; then
            PYTHON_SHEBANG="/system/bin/python3.10"
          else
            PYTHON_SHEBANG="/system/bin/python3"
          fi

          # 修复 Python 和 pip 脚本的 shebang
          find $GITHUB_WORKSPACE/android-rootfs/data/bin -type f -exec grep -l '^#!' {} \; | while read -r file; do
            sed -i "1s|.*|#!$PYTHON_SHEBANG|" "$file"
          done

          # 修复软连接
          find $GITHUB_WORKSPACE/android-rootfs/data -type l | while read -r link; do
            target=$(readlink "$link")
            if [[ ! "$target" =~ ^/ ]]; then
              new_target="system/$(basename "$target")"
              ln -sf "$new_target" "$link"
            fi
          done

          # 检查安装结果
          ls -lh $GITHUB_WORKSPACE/android-rootfs/data

      - name: 打包源代码
        run: |
          tar -czvf source-code.tar.gz \
              Python-3.10.0.tgz \
              zlib-1.2.13.tar.gz \
              pip-22.3.1.tar.gz \
              cpython/ \
              zlib-1.2.13/ \
              pip/

      - name: 打包产物
        run: |
          tar -czvf python-zlib-pip-android-arm64.tar.gz \
              -C $GITHUB_WORKSPACE/android-rootfs/data \
              --transform 's,^\./,system/,' .

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: python-zlib-pip-android-arm64-ndk27
          path: |
            python-zlib-pip-android-arm64.tar.gz
            source-code.tar.gz